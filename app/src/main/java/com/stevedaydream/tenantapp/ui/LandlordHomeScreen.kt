@file:OptIn(androidx.compose.material3.ExperimentalMaterial3Api::class)

package com.stevedaydream.tenantapp.ui


import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Description
import androidx.compose.material.icons.filled.Engineering
import androidx.compose.material.icons.filled.FlashOn
import androidx.compose.material.icons.filled.Groups
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.material.icons.filled.NoteAdd
import androidx.compose.material.icons.filled.PointOfSale
import androidx.compose.material.icons.filled.Visibility
import androidx.compose.material.icons.filled.VisibilityOff
import androidx.compose.material.icons.filled.Home
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Divider
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.ElevatedButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import com.stevedaydream.tenantapp.data.AppDatabase
import com.stevedaydream.tenantapp.data.RepairReportDao
import java.text.SimpleDateFormat
import java.util.*

@Composable
fun LandlordHomeScreen(
    landlordCode: String,
    onNavigate: (String) -> Unit = {}
) {
    // ÂèñÂæóË≥áÊñôÂ∫´ & DAO
    val context = LocalContext.current
    val db = AppDatabase.getDatabase(context)
    val announcementDao = db.announcementDao()
    val repairReportDao = db.repairReportDao()
    val announcements by announcementDao.getAll().collectAsState(initial = emptyList())
    val repairReports by repairReportDao.getAll().collectAsState(initial = emptyList())

    var expanded by remember { mutableStateOf(false) }
    var codeVisible by remember { mutableStateOf(false) }
    fun maskCode(code: String): String {
        return if (code.length <= 4) "*".repeat(code.length)
        else code.take(2) + "*".repeat(code.length - 4) + code.takeLast(2)
    }

    // Êó•ÊúüÊ†ºÂºèÂåñÂ∑•ÂÖ∑
    val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.TAIWAN)


    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("ÊàøÊù±ÂæåÂè∞", style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold)) },
                actions = {
                    IconButton(onClick = { expanded = true }) {
                        Icon(Icons.Default.MoreVert, contentDescription = "ÈÅ∏ÂñÆ")
                    }
                    DropdownMenu(
                        expanded = expanded,
                        onDismissRequest = { expanded = false }
                    ) {
                        DropdownMenuItem(
                            text = { Text("ÂõûÂ†±Á¥ÄÈåÑ") },
                            onClick = {
                                expanded = false
                                onNavigate("history")
                            }
                        )
                        // ÂèØ‰ª•ÁπºÁ∫åÂä†ÈÅ∏ÂñÆÈ†ÖÁõÆ
                    }
                }
            )
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .verticalScroll(rememberScrollState())
                .padding(horizontal = 16.dp, vertical = 8.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // ÊàøÊù±Â∫èËôüÈ°ØÁ§∫ÂçÄ
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Row(verticalAlignment = Alignment.CenterVertically) {
                    Text("ÊÇ®ÁöÑÊàøÊù±Â∫èËôü: ", style = MaterialTheme.typography.bodyLarge)
                    Text(
                        text = if (codeVisible) landlordCode else maskCode(landlordCode),
                        style = MaterialTheme.typography.titleLarge,
                        fontWeight = FontWeight.Bold
                    )
                }
                IconButton(onClick = { codeVisible = !codeVisible }) {
                    Icon(
                        imageVector = if (codeVisible) Icons.Filled.Visibility else Icons.Filled.VisibilityOff,
                        contentDescription = if (codeVisible) "Èö±ËóèÂ∫èËôü" else "È°ØÁ§∫Â∫èËôü"
                    )
                }
            }

            Spacer(modifier = Modifier.height(8.dp))

            // ÊúÄÊñ∞ÂÖ¨ÂëäÂç°Áâá
            Text(
                "üì¢ ÊúÄÊñ∞ÂÖ¨Âëä",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceContainerHigh),
                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
            ) {
                Column(Modifier.padding(16.dp)) {
                    if (announcements.isEmpty()) {
                        Text("ÁõÆÂâçÊ≤íÊúâÂÖ¨Âëä", style = MaterialTheme.typography.bodyLarge, color = MaterialTheme.colorScheme.onSurfaceVariant)
                    } else {
                        announcements.take(3).forEach {
                            Text(it.title, style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.SemiBold)
                            Text(it.content, maxLines = 2, style = MaterialTheme.typography.bodyMedium, color = MaterialTheme.colorScheme.onSurfaceVariant)
                            Divider(modifier = Modifier.padding(vertical = 4.dp), color = MaterialTheme.colorScheme.outlineVariant)
                        }
                    }
                    TextButton(
                        onClick = { onNavigate("announcement") },
                        modifier = Modifier
                            .align(Alignment.End)
                            .padding(top = 8.dp)
                    ) { Text("Êü•ÁúãÊõ¥Â§öÂÖ¨Âëä") }
                }
            }

            // ÂÑ™ÂåñÂæåÁöÑ‰øÆÁπïÂõûÂ†±ÂçÄÂ°äÔºåÈ°ØÁ§∫Êõ¥Ë©≥Á¥∞ÁöÑË≥áË®ä
            Text(
                "üõ†Ô∏è ÊúÄÊñ∞‰øÆÁπïÂõûÂ†±",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold
            )
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surfaceContainerHigh),
                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
            ) {
                Column(Modifier.padding(16.dp)) {
                    if (repairReports.isEmpty()) {
                        Text("ÁõÆÂâçÊ≤íÊúâÊñ∞ÁöÑ‰øÆÁπïÂõûÂ†±", style = MaterialTheme.typography.bodyLarge, color = MaterialTheme.colorScheme.onSurfaceVariant)
                    } else {
                        // È°ØÁ§∫ÊúÄÊñ∞ÁöÑ‰∏âÁ≠Ü‰øÆÁπïÂõûÂ†±Ôºå‰∏¶ÂåÖÂê´Êó•ÊúüÂíåË©≥Á¥∞Ë≥áË®ä
                        repairReports.take(3).forEach { report ->
                            Column(Modifier.fillMaxWidth()) {
                                Text(
                                    "ÊàøËôü: ${report.roomNumber} - ${report.issue}",
                                    style = MaterialTheme.typography.titleMedium,
                                    fontWeight = FontWeight.SemiBold
                                )
                                Text(
                                    "ÁßüÂÆ¢: ${report.tenantName}",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                                Text(
                                    "ÊèèËø∞: ${report.description}",
                                    maxLines = 2,
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                                Text(
                                    "ÂõûÂ†±ÊôÇÈñì: ${dateFormat.format(Date(report.date))}",
                                    style = MaterialTheme.typography.labelSmall,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                                Divider(
                                    modifier = Modifier.padding(vertical = 8.dp),
                                    color = MaterialTheme.colorScheme.outlineVariant
                                )
                            }
                        }
                    }
                    TextButton(
                        onClick = { onNavigate("repair_report_list") },
                        modifier = Modifier
                            .align(Alignment.End)
                            .padding(top = 8.dp)
                    ) { Text("Êü•ÁúãÊâÄÊúâÂõûÂ†±") }
                }
            }

            // ÂäüËÉΩÊåâÈàï
            ElevatedButton(
                modifier = Modifier.fillMaxWidth(),
                onClick = { onNavigate("history") }
            ) {
                Icon(Icons.Default.Engineering, contentDescription = "Êü•Ë©¢‰øÆÁπïÂõûÂ†±", modifier = Modifier.padding(end = 8.dp))
                Text("Êü•Ë©¢‰øÆÁπïÂõûÂ†±Ë≥áÊñô", style = MaterialTheme.typography.bodyLarge)
            }
            ElevatedButton(
                modifier = Modifier.fillMaxWidth(),
                onClick = { onNavigate("contract") }
            ) {
                Icon(Icons.Default.Description, contentDescription = "Áî¢ÁîüÈõªÂ≠êÂêàÁ¥Ñ", modifier = Modifier.padding(end = 8.dp))
                Text("Áî¢ÁîüÈõªÂ≠êÂêàÁ¥ÑÔºàPDFÔºâ", style = MaterialTheme.typography.bodyLarge)
            }
            ElevatedButton(
                modifier = Modifier.fillMaxWidth(),
                onClick = { onNavigate("room_manage") }
            ) {
                Icon(Icons.Default.Home, contentDescription = "ÊàøÈñìË≥áÊñôÁÆ°ÁêÜ", modifier = Modifier.padding(end = 8.dp))
                Text("ÊàøÈñìË≥áÊñôÁÆ°ÁêÜ", style = MaterialTheme.typography.bodyLarge)
            }
            ElevatedButton(
                modifier = Modifier.fillMaxWidth(),
                onClick = { onNavigate("electricity") }
            ) {
                Icon(Icons.Default.FlashOn, contentDescription = "ÈõªË°®Ë®àÁÆóÈ†ÅÈù¢", modifier = Modifier.padding(end = 8.dp))
                Text("ÈõªË°®Ë®àÁÆóÈ†ÅÈù¢", style = MaterialTheme.typography.bodyLarge)
            }
            ElevatedButton(
                modifier = Modifier.fillMaxWidth(),
                onClick = { onNavigate("excel_import") }
            ) {
                Icon(Icons.Default.NoteAdd, contentDescription = "ÂåØÂÖ• Excel Ë≥áÊñô", modifier = Modifier.padding(end = 8.dp))
                Text("ÂåØÂÖ• Excel Ë≥áÊñô", style = MaterialTheme.typography.bodyLarge)
            }
        }
    }
}
